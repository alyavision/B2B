"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ Synaplink
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
"""

import logging
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from config import Config
from openai_client import OpenAIClient
from application_handler import ApplicationHandler
import requests
from io import BytesIO

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SynaplinkBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ FriendEvent (—Ä–µ–±—Ä–µ–Ω–¥–∏–Ω–≥)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
            logger.info(f"üîë –°–æ–∑–¥–∞–Ω–∏–µ Application —Å —Ç–æ–∫–µ–Ω–æ–º: {Config.TELEGRAM_BOT_TOKEN[:10]}...")
            
            self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
            logger.info("‚úÖ Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ OpenAI –∫–ª–∏–µ–Ω—Ç–∞...")
            self.openai_client = OpenAIClient()
            logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ ApplicationHandler...")
            self.application_handler = ApplicationHandler()
            logger.info("‚úÖ ApplicationHandler —Å–æ–∑–¥–∞–Ω")
            
            self.user_states = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info("‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            self._setup_handlers()
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"üîç Stack trace: {traceback.format_exc()}")
            raise
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ CallbackQueryHandler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.application.add_handler(CommandHandler("reset", self.reset_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    def _gdrive_to_direct(self, url: str) -> str:
        """–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ Google Drive –≤–∏–¥–∞ /file/d/<id>/view, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É."""
        try:
            match = re.search(r"drive\.google\.com/file/d/([^/]+)/", url)
            if match:
                file_id = match.group(1)
                return f"https://drive.google.com/uc?export=download&id={file_id}"
            return url
        except Exception:
            return url

    def _strip_markdown(self, text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é Markdown-—Ä–∞–∑–º–µ—Ç–∫—É —É –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        if not text:
            return text
        try:
            # [—Ç–µ–∫—Å—Ç](url) -> —Ç–µ–∫—Å—Ç
            text = re.sub(r"\[([^\]]+)\]\(([^)]+)\)", r"\1", text)
            # **x**, *x*, __x__, _x_ -> x
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)
            text = re.sub(r"\*(.*?)\*", r"\1", text)
            text = re.sub(r"__(.*?)__", r"\1", text)
            text = re.sub(r"_(.*?)_", r"\1", text)
            # `x` –∏–ª–∏ ```x``` -> x
            text = re.sub(r"`{1,3}([\s\S]*?)`{1,3}", r"\1", text)
            return text
        except Exception:
            return text

    async def _send_checklist(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞."""
        if not getattr(Config, 'CHECKLIST_URL', None):
            logger.info("‚ÑπÔ∏è CHECKLIST_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫-–ª–∏—Å—Ç–∞")
            return
        chat_id = update.effective_chat.id
        url = Config.CHECKLIST_URL
        logger.info(f"üìÑ CHECKLIST_URL={url}")
        caption = "–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º –Ω–∞—à –≥–∞–π–¥ ¬´–ö–∞–∫ –∏–≥—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å –ª–∏–¥–µ—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ¬ª."
        # –ü–æ–ø—ã—Ç–∫–∞ A: —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ (–ø—É—Å—Ç—å Telegram —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–∞–º)
        try:
            await context.bot.send_document(chat_id=chat_id, document=self._gdrive_to_direct(url), caption=caption)
            logger.info("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Telegram –ø–æ URL (–ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")
            return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ URL –Ω–∞–ø—Ä—è–º—É—é: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ B: —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–π—Ç–∞–º–∏, –ø—Ä–æ–≤–µ—Ä–∏–≤ —Å–∏–≥–Ω–∞—Ç—É—Ä—É PDF
        try:
            direct = self._gdrive_to_direct(url)
            resp = requests.get(direct, timeout=30)
            content_type = resp.headers.get('Content-Type', '')
            if resp.status_code == 200 and resp.content and (b'%PDF' in resp.content[:8] or 'pdf' in content_type.lower()):
                buf = BytesIO(resp.content)
                buf.name = "–ö–∞–∫ –∏–≥—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å –ª–∏–¥–µ—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ.pdf"
                await context.bot.send_document(chat_id=chat_id, document=buf, caption=caption)
                logger.info("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –±–∞–π—Ç—ã (PDF)")
                return
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π PDF: HTTP {resp.status_code}, Content-Type={content_type}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ C: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º —Å—Å—ã–ª–∫—É (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø)
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"{caption}\n{self._gdrive_to_direct(url)}")
            logger.info("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (fallback)")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫-–ª–∏—Å—Ç"""
        logger.info("üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞!")
        user_id = update.effective_user.id if update.effective_user else None
        self.user_states[user_id] = "start"

        # 1) –ë–∞–Ω–Ω–µ—Ä
        try:
            if update.message:
                await self._send_logo(update, context)
            elif update.callback_query:
                await self._send_logo(update.callback_query, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")

        # 2) –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ PDF

        # 3) –ê–≤—Ç–æ—Å–µ–Ω–¥ —á–µ–∫-–ª–∏—Å—Ç–∞ (–Ω–∞–¥—ë–∂–Ω—ã–π)
        await self._send_checklist(update, context)

        # 4) –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–µ—Ä–≤—ã–º
        try:
            self.user_states[user_id] = "chatting"
            initial_message = (
                "–ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–µ–∂–ª–∏–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç FriendEvent. –í–µ–¥–∏ —Å–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, "
                "–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è, —É–∑–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, "
                "–æ—Ñ–æ—Ä–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∑–∞—è–≤–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."
            )
            assistant_reply = await asyncio.to_thread(self.openai_client.send_message, user_id, initial_message)
            if update.message:
                await update.message.reply_text(self._strip_markdown(assistant_reply))
            elif update.callback_query and update.callback_query.message:
                await update.callback_query.message.reply_text(self._strip_markdown(assistant_reply))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
    
    async def _send_logo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ FriendEvent"""
        try:
            logger.info(f"üñºÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: {Config.LOGO_IMAGE_URL}")
            welcome_caption = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ FriendEvent!"

            if Config.LOGO_IMAGE_URL.startswith('http'):
                # –ï—Å–ª–∏ —ç—Ç–æ URL, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø–æ URL")
                response = requests.get(self._gdrive_to_direct(Config.LOGO_IMAGE_URL))
                if response.status_code == 200:
                    photo = BytesIO(response.content)
                    await update.message.reply_photo(photo=photo, caption=welcome_caption)
                    logger.info("‚úÖ –õ–æ–≥–æ—Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ URL")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {response.status_code}")
                    await update.message.reply_text("üè¢ FriendEvent")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                logger.info("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–∑ —Ñ–∞–π–ª–∞")
                with open(Config.LOGO_IMAGE_URL, 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=welcome_caption)
                logger.info("‚úÖ –õ–æ–≥–æ—Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
            await update.message.reply_text("üè¢ FriendEvent")
            logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø")
    
    async def _is_user_subscribed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)"""
        try:
            channel = Config.TELEGRAM_CHANNEL_LINK
            # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
            if channel.startswith('https://t.me/'):
                channel_username = channel.split('https://t.me/')[-1].replace('/', '')
                if not channel_username.startswith('@'):
                    channel_username = '@' + channel_username
            else:
                channel_username = channel
            member = await self.application.bot.get_chat_member(channel_username, user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')
            return False

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        logger.info("üîò button_callback –≤—ã–∑–≤–∞–Ω!")
        query = update.callback_query
        logger.info(f"üîò CallbackQuery –ø–æ–ª—É—á–µ–Ω: {query.data}")
        await query.answer()
        user_id = query.from_user.id
        logger.info(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if query.data == "start_chat":
            # –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É ‚Äî —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
            logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self._start_chat(query, context)
        elif query.data == "reset_chat":
            logger.info(f"üîÑ –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await self._reset_chat(query, context)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    async def _start_chat(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
        user_id = query.from_user.id
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = "chatting"
        # –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
        reply_markup = None
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        try:
            initial_message = "–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç –∏–º–µ–Ω–∏ FriendEvent: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–ø—Ä–æ—Å–∏ –∏–º—è –∏ —Ü–µ–ª—å."
            _ = await asyncio.to_thread(self.openai_client.send_message, user_id, initial_message)
            # –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            welcome_message = (
                "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º —Å–æ–±—ã—Ç–∏–µ–º: –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç, –ø–ª–æ—â–∞–¥–∫—É –∏ —Å–º–µ—Ç—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É."
            )
            await query.edit_message_text(welcome_message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            welcome_message = (
                "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º —Å–æ–±—ã—Ç–∏–µ–º: –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç, –ø–ª–æ—â–∞–¥–∫—É –∏ —Å–º–µ—Ç—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É."
            )
            await query.edit_message_text(welcome_message, reply_markup=reply_markup)
    
    async def _reset_chat(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
        user_id = query.from_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ OpenAI
        self.openai_client.reset_conversation(user_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
        self.user_states[user_id] = "start"
        
        await query.edit_message_text(
            "üîÑ –†–∞–∑–≥–æ–≤–æ—Ä —Å–±—Ä–æ—à–µ–Ω!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info("üì© handle_message –≤—ã–∑–≤–∞–Ω!")
        user_id = update.effective_user.id if update.effective_user else None
        message_text = update.message.text if update.message else None
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Ç–µ–∫—Å—Ç: {message_text}")

        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ 'chatting' (—Å–µ—Ä–≤–µ—Ä–ª–µ—Å—Å —Å—Ä–µ–¥–∞ –º–æ–∂–µ—Ç —Ç–µ—Ä—è—Ç—å –ø–∞–º—è—Ç—å),
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
        if user_id not in self.user_states or self.user_states[user_id] != "chatting":
            self.user_states[user_id] = "chatting"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É OpenAI
        try:
            if update.message:
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            response = await asyncio.to_thread(self.openai_client.send_message, user_id, message_text)
            logger.info(f"Diag: thread_id={self.openai_client.get_thread_id(user_id)}")
            logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {response}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∑–∞—è–≤–∫–∏
            is_final = self._contains_final_application(response)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞: {is_final}")
            if is_final:
                logger.info("–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç...")
                await self._send_application_to_working_chat(context, response, user_id)
                if update.message:
                    await update.message.reply_text(self._strip_markdown(response))
            else:
                if update.message:
                    await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if update.message:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞."
                )
    

    
    def _contains_final_application(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∑–∞—è–≤–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫. –¢–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{text}")
        if not text:
            logger.info("‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äî –Ω–µ –∑–∞—è–≤–∫–∞")
            return False
        if "[–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç]" not in text:
            logger.info("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ [–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç] ‚Äî –Ω–µ –∑–∞—è–≤–∫–∞")
            return False
        required_fields = ["–ò–º—è:", "–¢–µ–ª–µ—Ñ–æ–Ω:", "–¢–µ–ª–µ–≥—Ä–∞–º:", "–ó–∞–ø—Ä–æ—Å:"]
        for field in required_fields:
            if field not in text:
                logger.info(f"‚ùå –ù–µ—Ç –ø–æ–ª—è {field} ‚Äî –Ω–µ –∑–∞—è–≤–∫–∞")
                return False
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∑–∞—è–≤–∫–∏!")
        return True
    

    
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    async def _send_application_to_working_chat(self, context: ContextTypes.DEFAULT_TYPE, application_text: str, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –±–ª–æ–∫ –∑–∞—è–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            working_chat_message = (
                f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}\n\n"
                f"{application_text}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
            await context.bot.send_message(
                chat_id=Config.WORKING_CHAT_ID,
                text=working_chat_message
            )
            
            logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç {Config.WORKING_CHAT_ID}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                simple_message = f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}\n\n{application_text}"
                await context.bot.send_message(
                    chat_id=Config.WORKING_CHAT_ID,
                    text=simple_message
                )
                logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º")
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e2}")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        user_id = update.effective_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ OpenAI
        self.openai_client.reset_conversation(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = "start"
        
        await update.message.reply_text(
            "üîÑ –†–∞–∑–≥–æ–≤–æ—Ä —Å–±—Ä–æ—à–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            logger.info(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {Config.TELEGRAM_BOT_TOKEN[:10]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ FriendEvent...")
            logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self._error_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            logger.error(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"üîç Stack trace: {traceback.format_exc()}")
            raise
    
    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        logger.error(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(context.error).__name__}")
        import traceback
        logger.error(f"üîç Stack trace: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if hasattr(context.error, 'status_code'):
            logger.error(f"üåê HTTP —Å—Ç–∞—Ç—É—Å: {context.error.status_code}")
        if hasattr(context.error, 'response'):
            logger.error(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {context.error.response}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = SynaplinkBot()
    bot.run()
